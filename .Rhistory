pred_rs <- list.files(r_train_dir, recursive = T, full.names = T)
pred_rs <- pred_rs[grepl('.tif',pred_rs)]
pred_rs <- pred_rs[grepl(paste(tile_i_multiversion, collapse = "|"),pred_rs)]
pred_rs
tile
r_train_dir
tile_i_multiversion
tile_i_multiversion
pred_rs <- list.files(r_train_dir, recursive = T, full.names = T)
pred_rs <- pred_rs[grepl('.tif',pred_rs)]
tile_i_multiversion
pred_rs <- pred_rs[grepl(paste(tile_i_multiversion, collapse = "|"),pred_rs)]
pred_rs
tile_i_multiversion <- c(tile_i, gsub('_','-',tile_i))
pred_rs <- list.files(r_train_dir, recursive = T, full.names = T)
pred_rs <- pred_rs[grepl('.tif',pred_rs)]
pred_rs
paste(tile_i_multiversion, collapse = "|")
tile_i_multiversion <- c(tile_i, gsub('_','-',tile_i))
pred_rs <- list.files(r_train_dir, recursive = T, full.names = T)
pred_rs <- pred_rs[grepl('.tif',pred_rs)]
pred_rs
r_train_dir
r_train_dir <- '//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/RGBN_LUT'
r_train_dir <- '//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/RGBN_LUT'
tile_i_multiversion <- c(tile_i, gsub('_','-',tile_i))
pred_rs <- list.files(r_train_dir, recursive = T, full.names = T)
pred_rs <- pred_rs[grepl('.tif',pred_rs)]
pred_rs <- pred_rs[grepl(paste(tile_i_multiversion, collapse = "|"),pred_rs)]
pred_rs
vuln_classes = list(c('Pb'))
lapply(vuln_classes,x[[1]])
lapply(vuln_classes,[[1]])
lapply(vuln_classes,function(x){[[1]]})
lapply(vuln_classes,function(x){x[[1]]})
vuln_classes = list(c('Pb'),c('a'))
lapply(vuln_classes,function(x){x[[1]]})
vuln_classes = list(c('Pb'),c('a','asdfasdf'))
lapply(vuln_classes,function(x){x[[1]]})
sp::spsample
?sp::spsample
?sample
cbind.data.frame(NULL, data.frame(a=1, b=2))
cbind.data.frame(data.frame(), data.frame(a=1, b=2))
outp <- list[[]]
outp <- list()
outp[['aa']] <- data.frame(a=1)
outp[['bb']] <- data.frame(a=1)
outp
edit(CanHeMonR::calibrate_sicktree_model)
CanHeMonR::calibrate_sicktree_model
vuln_classes
unlist(vuln_classes)
r_train_dir
?dismo::maxent
?raster::extract
?sample
?raster::extract
?randomPoints
tile
r_train_dir
list.files(r_train_dir)
strsplit(list.files(r_train_dir),tile_i)
tt<-c('pt606000.4401000.1','pt606000.4401000.1','pt606000.4401000.1','pt606000.4401000.1','pt606000_4401000_b3_ASM','pt606000_4401000_b3_Contr')
strsplit(tt,'pt606000.4401000')
strsplit(tt,'pt606000.4401000',fixed=T)
strsplit(tt,'pt606000.4401000',fixed=F)
lapply(strsplit(tt,'pt606000.4401000',fixed=F),function(x){x[-1]}
)
unlist(lapply(strsplit(tt,'pt606000.4401000',fixed=F),function(x){x[-1]}))
tile_i_multiversion
tile_i <- 'pt606000.4401000'
tile_i_multiversion <- unique(c(tile_i, gsub('_','-',tile_i),gsub('-','_',tile_i)))
tile_i_multiversion
tile_i_multiversion <- unique(c(tile_i, gsub('.','-',tile_i),gsub('.','_',tile_i)))
tile_i_multiversion
tile_i_multiversion <- unique(c(tile_i, gsub('\\.','-',tile_i),gsub('.','_',tile_i)))
tile_i_multiversion
tile_i_multiversion <- unique(c(tile_i, gsub('\\.','-',tile_i),gsub('\\.','_',tile_i)))
unlist(lapply(strsplit(tt,'pt606000.4401000',fixed=F),function(x){x[-1]}))
tile_i_multiversion <- unique(c(tile_i, gsub('\\.','-',tile_i),gsub('\\.','_',tile_i),gsub('\\.','.',tile_i)))
tile_i_multiversion
tile_i_multiversion <- unique(c(tile_i, gsub('\\.','-',tile_i),gsub('\\.','_',tile_i),gsub('\\.','\\.',tile_i)))
tile_i_multiversion
tile_i_multiversion <- (c(tile_i, gsub('\\.','-',tile_i),gsub('\\.','_',tile_i),gsub('\\.','\\.',tile_i)))
tile_i_multiversion
tile_i_multiversion <- (c(tile_i, gsub('\\.','-',tile_i),gsub('\\.','_',tile_i),gsub('\\.','.',tile_i)))
tile_i_multiversion
tile_i_multiversion <- unique(c(tile_i, gsub('_','-',tile_i),gsub('-','_',tile_i),gsub('-','\\.',tile_i),gsub('_','\\.',tile_i)))
tile_i_multiversion
pred_rs <- all_tifs[grepl(paste(tile_i_multiversion, collapse = "|"), all_tifs)]
paste(tile_i_multiversion, collapse = "|")
tile_i_multiversion <- unique(c(tile_i, gsub('_','-',tile_i),gsub('-','_',tile_i),gsub('-','\\.',tile_i),gsub('_','\\.',tile_i)))
tile_i_multiversion
tile_i_multiversion <- unique(c(tile_i, gsub('_','-',tile_i),gsub('-','_',tile_i),gsub('-','\\.',tile_i),gsub('_','\\.',tile_i),gsub('\\.','-',tile_i),,gsub('\\.','_',tile_i)))
tile_i_multiversion <- unique(c(tile_i, gsub('_','-',tile_i),gsub('-','_',tile_i),gsub('-','\\.',tile_i),gsub('_','\\.',tile_i),gsub('\\.','-',tile_i),gsub('\\.','_',tile_i)))
tile_i_multiversion
paste(tile_i_multiversion, collapse = "|")
?saveRDS
?saveRDS
rbind.data.frame(data.frame(a=1,b=2),data.frame())
library(CanHeMonR)
?subset
?maxent
? dismo::predict
800/20
?raster::stack
loadRDS('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/classification_temp/maxent_samplemaxent_training_dfs_10_samples.rdata')
?saveRDS
readRDS('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/classification_temp/maxent_samplemaxent_training_dfs_10_samples.rdata')
?substr
?read.csv
?write.csv2
?read.table
?readRDS
require(rJava)
rm(list=ls())
model_dir <- "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/classification_temp/"
tt<-file.path(model_dir, 'maxent_samplemaxent_training_dfs_10_samples.rdsdata')
load(tt)
loadRDS(tt)
readRDS(tt)
str(readRDS(tt))
tt<-file.path(model_dir, 'maxent_samplemaxent_training_dfs_10_samples.rdata')
load(tt)
ls()
tt
rm(list=ls())
model_dir <- "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/classification_temp/"
load(file.path(model_dir, 'Pb.rdsdata'))
load(file.path(model_dir, 'Pb.rdata'))
ls()
saveRDS(mod2,file.path(model_dir,'Pb.rdsdata'))
mod2
mod2
?writeRaster
run_sicktree_model_multitile <- function(
predictors_dir = "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/RGBN_LUT/",
fname_predictors_txt = "predictors_pt617000_4404000.txt",
MaxEntmodel_dir = "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/classification_temp/"
fname_MaxEntmodel_r = "samp10_Pb.rdsdata",
output_dir = "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/classification_temp/",
fname_output_tif){
#required R libraries
#rgdal, raster, rJava, dismo
require(raster)
require(rJava)
require(dismo)
#required software: maxent .jar. The rJava library calls it from within the dismo library
#https://www.cs.princeton.edu/~schapire/maxent/
#+++++++++++++++++++++++++++++++++++++++++++++++
#run this code in R 32 bit
#see http://stackoverflow.com/questions/7019912/using-the-rjava-package-on-win7-64-bit-with-r
#http://cran.r-project.org/web/packages/dismo/vignettes/sdm.pdf
#+++++++++++++++++++++++++++++++++++++++++++++++
if (R.Version()$arch != "i386"){
cat("This code needs to be run in 32-bit version of R\n Exiting \n")
}
#load the model
mod2 <- readRDS(fname_MaxEntmodel_r)
#load the predictor layers
raster_fnames <- unlist(read.table(fname_predictors_txt,stringsAsFactors=F)[,1])
r_pred <- raster::stack(raster_fnames)
#adjust the layernames to make them conform the model syntax
names(r_pred) <- paste0('l',substr(names(r_pred),17,nchar(names(r_pred))))
# run the model and write the output away to a file
px <- dismo::predict(r_pred, mod2,  progress = '')
px <- round(255*px)
raster::writeRaster(px,filename = fname_output_tif, overwrite = T, dataType = 'INT1U' )
return()
}
predictors_dir = "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/RGBN_LUT/"
fname_predictors_txt = "predictors_pt617000_4404000.txt"
raster_fnames <- unlist(read.table(fname_predictors_txt,stringsAsFactors=F)[,1])
raster_fnames <- unlist(read.table(file.path(predictors_dir, fname_predictors_txt), stringsAsFactors=F)[,1])
txt_dir = "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/classification_temp/"
raster_fnames <- unlist(read.table(file.path(txt_dir, fname_predictors_txt), stringsAsFactors=F)[,1])
raster_fnames
raster_fnames <- unlist(read.table(file.path(txt_dir, fname_predictors_txt), stringsAsFactors=F)[,1])
raster_fnames
predictors_dir
file.path(predictors_dir, raster_fnames)
output_dir = "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/classification_temp/"
substr(fname_predictors_txt)
strsplit(fname_predictors_txt,"//.")
strsplit(fname_predictors_txt,".txt")
unlist(strsplit(fname_predictors_txt,".txt"))
paste0(unlist(strsplit(fname_predictors_txt,".txt"),strsplit(fname_MaxEntmodel_r,".rdsdata"))
)
fname_MaxEntmodel_r = "samp10_Pb.rdsdata"
paste0(unlist(strsplit(fname_predictors_txt,".txt"),strsplit(fname_MaxEntmodel_r,".rdsdata"))
)
strsplit(fname_MaxEntmodel_r,".rdsdata")
paste0(unlist(strsplit(fname_predictors_txt,".txt"),unlist(strsplit(fname_MaxEntmodel_r,".rdsdata"))))
unlist(strsplit(fname_MaxEntmodel_r,".rdsdata"))
nlist(strsplit(fname_predictors_txt,".txt")
unlist(strsplit(fname_predictors_txt,".txt")
)
paste0(unlist(strsplit(fname_predictors_txt,".txt")),unlist(strsplit(fname_MaxEntmodel_r,".rdsdata")))
paste0(unlist(strsplit(fname_predictors_txt,".txt")),unlist(strsplit(fname_MaxEntmodel_r,".rdsdata")), ".tif")
fname_output_tif <- file.path(output_dir,
paste0(unlist(strsplit(fname_predictors_txt,".txt")),unlist(strsplit(fname_MaxEntmodel_r,".rdsdata")), ".tif")
)
fname_output_tif
42292/365
r_train_dir <- "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/RGBN_LUT"
tile <- 'ALL',
data_outp_dir = "//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/classification_temp"#, abs_samp = 1000,
parallel <- F#, nWorkers = 4){
r_train_dir
#harvest all the tif files in the directories holding covariate/predictor images
all_tifs <- list.files(r_train_dir, recursive = T, full.names = T)
all_tifs <- all_tifs[grepl('.tif',all_tifs)]
#excluded the tif files in the unprojected folder
all_tifs <- all_tifs[!grepl('orig_noPRJ', all_tifs)]
#if you want to run all the tiles in a directory, harvest the available tilenames
if (tile[1] == 'ALL'){
tile <- substr(basename(all_tifs),1,16)
tile <- unique(tile)
#only keep tiles that start  with 'pt'
tile <- tile[substr(tile,1,2) == 'pt']
cat(length(tile),' tiles are considered\n')
}
tile_counter <- 0
tile
tile <- 'ALL'
#if you want to run all the tiles in a directory, harvest the available tilenames
if (tile[1] == 'ALL'){
tile <- substr(basename(all_tifs),1,16)
tile <- unique(tile)
#only keep tiles that start  with 'pt'
tile <- tile[substr(tile,1,2) == 'pt']
cat(length(tile),' tiles are considered\n')
}
tile_i <- tile[100]
#make alternative tile code (Margherita uses these in the texture filenames)
tile_i_multiversion <- unique(c(tile_i, gsub('_','-',tile_i),gsub('-','_',tile_i),gsub('-','\\.',tile_i),gsub('_','\\.',tile_i),gsub('\\.','-',tile_i),gsub('\\.','_',tile_i)))
tile_i_multiversion_for_regexpr <- paste(tile_i_multiversion, collapse = "|")
# pred_rs <- list.files(r_train_dir, recursive = T, full.names = T)
#pred_rs <- pred_rs[grepl('.tif',pred_rs)]
pred_rs <- all_tifs[grepl(tile_i_multiversion_for_regexpr, all_tifs)]
length(pred_rs)
txt_name <- paste0('predictors_', tile_i, '.txt')
txt_name
txt_name <- paste0('predictors_', gsub('-','_',tile_i), '.txt')
txt_name
pred_rs
gsub(r_train_dir, "",pred_rs)
gsub(gsub(r_train_dir,"/"), "",pred_rs)
gsub(paste0(r_train_dir,"/"), "",pred_rs)
pred_nams <- gsub(paste0(r_train_dir,"/"), "",pred_rs)
gsub(paste0(r_train_dir,"/"), "",pred_rs)
pred_names <- gsub(paste0(r_train_dir,"/"), "",pred_rs)
write_table(pred_names, txt_name)
write.table(pred_names, txt_name)
txtname
txt_name
getwd()
write.table(file.path(data_output_dir,pred_names), txt_name)
write.table(file.path(data_outp_dir,pred_names), txt_name)
file.path(data_outp_dir,pred_names)
write.table(pred_names, file.path(data_outp_dir,txt_name))
pred_names
as.vector(pred_names)
?write.table
write.table(pred_names, file.path(data_outp_dir,txt_name),col.names = F, row.names = F)
for (tile_i in tile){
#browser()
#make alternative tile code (Margherita uses these in the texture filenames)
tile_i_multiversion <- unique(c(tile_i, gsub('_','-',tile_i),gsub('-','_',tile_i),gsub('-','\\.',tile_i),gsub('_','\\.',tile_i),gsub('\\.','-',tile_i),gsub('\\.','_',tile_i)))
tile_i_multiversion_for_regexpr <- paste(tile_i_multiversion, collapse = "|")
# pred_rs <- list.files(r_train_dir, recursive = T, full.names = T)
#pred_rs <- pred_rs[grepl('.tif',pred_rs)]
pred_rs <- all_tifs[grepl(tile_i_multiversion_for_regexpr, all_tifs)]
#an empty data frame to hold the data extracted for this tile
if (length(pred_rs) == 23){################################################### this is until the copying is complete!
#check if you have any points in this tile
txt_name <- paste0('predictors_', gsub('-','_',tile_i), '.txt')
pred_names <- gsub(paste0(r_train_dir,"/"), "",pred_rs)
write.table(pred_names, file.path(data_outp_dir,txt_name),col.names = F, row.names = F)
}
}
})
?focalWeight
?raster
Pb_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/eval_CB_Pb_20170217.shp')
Pb_trees
latlon <- coordinates(spTransform(Pb_trees, CRS("+proj=longlat +datum=WGS84")))
slot(Pb_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(Pb_trees)[,1],UTM29N_y=coordinates(Pb_trees)[,2],
imdate = '17Nov2016')
latlon <- sp::coordinates(spTransform(Pb_trees, CRS("+proj=longlat +datum=WGS84")))
require(raster)
latlon <- coordinates(spTransform(Pb_trees, CRS("+proj=longlat +datum=WGS84")))
slot(Pb_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(Pb_trees)[,1],UTM29N_y=coordinates(Pb_trees)[,2],
imdate = '17Nov2016')
head(Pb_trees)
projection(Pb_trees)
buff_zone <- raster::shapefile('//ies.jrc.it/h03/FISE/forest/CanopyHealthMonitoring/PWN/maps/PT_buffer_zone/FreguesiasZT_SHGM_LAEA.shp')
buff_zone <- spTransform(buff_zone, CRS(projection(Pb_trees)))
tt <- raster::intersect(Pb_trees, buff_zone)
tt_ <- dplyr::full_join(slot(Pb_trees,"data"), slot(tt,"data"))
tt_$in_buffer <- ifelse(is.na(tt_$DISTRITO_),F, T)
slot(Pb_trees, 'data') <- tt_
head(Pb_trees)
raster::shapefile(Pb_trees, 'data','//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/sent_to_ICNF/eval_CB_Pb_20170317.shp',
overwrite = F)
getwd()
list.files()
raster::shapefile(Pb_trees, '//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/sent_to_ICNF/eval_CB_Pb_20170317.shp',
overwrite = F)
p_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/eval_CB_p_20170217.shp')
#add coordinates as attributes
require(raster)
latlon <- coordinates(spTransform(p_trees, CRS("+proj=longlat +datum=WGS84")))
slot(p_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(p_trees)[,1],UTM29N_y=coordinates(p_trees)[,2],
imdate = '17Nov2016')
head(p_trees)
#add attributes that show if a tree is inside or outside bufferzone and in which admin unit.s
tt <- raster::intersect(p_trees, buff_zone)
tt_ <- dplyr::full_join(slot(p_trees,"data"), slot(tt,"data"))
tt_$in_buffer <- ifelse(is.na(tt_$DISTRITO_),F, T)
slot(p_trees, 'data') <- tt_
head(p_trees)
raster::shapefile(p_trees, '//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/sent_to_ICNF/eval_CB_p_20170317.shp',
overwrite = F)
p_trees
Pb_trees
16987-1996
p_treesx <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/eval_CB_p_20170217.shp')
Pb_treesx
p_treesx
p_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/temp/eval_CB_p_20170217.shp')
#add coordinates as attributes
require(raster)
latlon <- coordinates(spTransform(p_trees, CRS("+proj=longlat +datum=WGS84")))
slot(p_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(p_trees)[,1],UTM29N_y=coordinates(p_trees)[,2],
imdate = '17Nov2016')
head(p_trees)
#add attributes that show if a tree is inside or outside bufferzone and in which admin unit.s
buff_zone <- raster::shapefile('//ies.jrc.it/h03/FISE/forest/CanopyHealthMonitoring/PWN/maps/PT_buffer_zone/FreguesiasZT_SHGM_LAEA.shp')
buff_zone <- spTransform(buff_zone, CRS(projection(p_trees)))
tt <- raster::intersect(p_trees, buff_zone)
tt_ <- dplyr::full_join(slot(p_trees,"data"), slot(tt,"data"))
tt_$in_buffer <- ifelse(is.na(tt_$DISTRITO_),F, T)
slot(p_trees, 'data') <- tt_
head(p_trees)
p_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/temp/eval_CB_p_20170317.shp')
#add coordinates as attributes
require(raster)
latlon <- coordinates(spTransform(p_trees, CRS("+proj=longlat +datum=WGS84")))
slot(p_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(p_trees)[,1],UTM29N_y=coordinates(p_trees)[,2],
imdate = '17Nov2016')
head(p_trees)
#add attributes that show if a tree is inside or outside bufferzone and in which admin unit.s
buff_zone <- raster::shapefile('//ies.jrc.it/h03/FISE/forest/CanopyHealthMonitoring/PWN/maps/PT_buffer_zone/FreguesiasZT_SHGM_LAEA.shp')
buff_zone <- spTransform(buff_zone, CRS(projection(p_trees)))
tt <- raster::intersect(p_trees, buff_zone)
tt_ <- dplyr::full_join(slot(p_trees,"data"), slot(tt,"data"))
tt_$in_buffer <- ifelse(is.na(tt_$DISTRITO_),F, T)
slot(p_trees, 'data') <- tt_
head(p_trees)
dim(p_trees)
raster::shapefile(p_trees, '//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/sent_to_ICNF/eval_CB_p_20170317.shp',
overwrite = F)
Pb_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/temp/eval_CB_Pb_20170317.shp')
#add coordinates as attributes
require(raster)
latlon <- coordinates(spTransform(Pb_trees, CRS("+proj=longlat +datum=WGS84")))
slot(Pb_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(Pb_trees)[,1],UTM29N_y=coordinates(Pb_trees)[,2],
imdate = '17Nov2016')
head(Pb_trees)
#add attributes that show if a tree is inside or outside bufferzone and in which admin unit.s
tt <- raster::intersect(Pb_trees, buff_zone)
tt_ <- dplyr::full_join(slot(Pb_trees,"data"), slot(tt,"data"))
tt_$in_buffer <- ifelse(is.na(tt_$DISTRITO_),F, T)
slot(Pb_trees, 'data') <- tt_
head(Pb_trees)
dim(Pb_trees)
#pp trees
pp_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/temp/eval_CB_pp_20170317.shp')
#add coordinates as attributes
require(raster)
latlon <- coordinates(spTransform(pp_trees, CRS("+proj=longlat +datum=WGS84")))
slot(pp_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(pp_trees)[,1],UTM29N_y=coordinates(pp_trees)[,2],
imdate = '17Nov2016')
head(pp_trees)
#add attributes that show if a tree is inside or outside bufferzone and in which admin unit.s
pp_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/temp/eval_CB_pp_20170317.shp')
ppl_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/temp/eval_CB_ppl_20170317.shp')
#add coordinates as attributes
require(raster)
latlon <- coordinates(spTransform(ppl_trees, CRS("+proj=longlat +datum=WGS84")))
slot(ppl_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(ppl_trees)[,1],UTM29N_y=coordinates(ppl_trees)[,2],
imdate = '17Nov2016')
head(ppl_trees)
#add attributes that show if a tree is inside or outside bufferzone and in which admin unit.s
tt <- raster::intersect(ppl_trees, buff_zone)
tt_ <- dplyr::full_join(slot(ppl_trees,"data"), slot(tt,"data"))
tt_$in_buffer <- ifelse(is.na(tt_$DISTRITO_),F, T)
slot(ppl_trees, 'data') <- tt_
head(ppl_trees)
dim(ppl_trees)
raster::shapefile(ppl_trees, '//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/sent_to_ICNF/eval_CB_ppl_20170317.shp',
overwrite = F)
Pb_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/temp/eval_CB_Pb_20170317.shp')
#add coordinates as attributes
require(raster)
latlon <- coordinates(spTransform(Pb_trees, CRS("+proj=longlat +datum=WGS84")))
slot(Pb_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(Pb_trees)[,1],UTM29N_y=coordinates(Pb_trees)[,2],
imdate = '17Nov2016')
head(Pb_trees)
slot(Pb_trees, 'data') <- tt_
head(Pb_trees)
dim(Pb_trees)
raster::shapefile(Pb_trees, '//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/sent_to_ICNF/eval_CB_Pb_20170317.shp',
overwrite = F)
Pb_trees
raster::shapefile(Pb_trees, '//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/sent_to_ICNF/eval_CB_Pb_20170317.shp',
overwrite = F)
Pb_trees <- raster::shapefile('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/temp/eval_CB_Pb_20170317.shp')
#add coordinates as attributes
require(raster)
latlon <- coordinates(spTransform(Pb_trees, CRS("+proj=longlat +datum=WGS84")))
slot(Pb_trees, 'data') <- cbind.data.frame(lat_DD = latlon[,1], lon_DD = latlon[,2],
UTM29N_x= coordinates(Pb_trees)[,1],UTM29N_y=coordinates(Pb_trees)[,2],
imdate = '17Nov2016')
head(Pb_trees)
buff_zone <- raster::shapefile('//ies.jrc.it/h03/FISE/forest/CanopyHealthMonitoring/PWN/maps/PT_buffer_zone/FreguesiasZT_SHGM_LAEA.shp')
buff_zone <- spTransform(buff_zone, CRS(projection(Pb_trees)))
tt <- raster::intersect(Pb_trees, buff_zone)
tt_ <- dplyr::full_join(slot(Pb_trees,"data"), slot(tt,"data"))
tt_$in_buffer <- ifelse(is.na(tt_$DISTRITO_),F, T)
slot(Pb_trees, 'data') <- tt_
head(Pb_trees)
dim(Pb_trees)
raster::shapefile(Pb_trees, '//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Portugal/DMC/ortophotos_22122016/visual_interpretation/sent_to_ICNF/eval_CB_Pb_20170317.shp',
overwrite = F)
Pb_trees
p_trees
ppl_trees
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
list.files()
list.files()[1]
r <- raster::raster(list.files()[1])
r
range(r)
raster::range(r)
max(r)
?cellStats
raster::cellStats(r)
raster::cellStats(r,stat='range')
?rasterToPolygons
pols <- raster::rasterToPolygons(r, dissolve = F, fun = function(x){x==1}, digits =2)
pols
pnts <- rgeos::gCentroid(pols)
pnts
plot(pols[1])
sp::plot(pols[1])
sp::plot(pols[1,])
sp::plot(pols[100,])
sp::plot(pols[1000,])
pols <- raster::rasterToPolygons(r, dissolve = T, fun = function(x){x==1}, digits =2)
pols
sp::plot(pols[1:100,])
sp::plot(pols[100:101,])
pols2 <- rgeos::gUnaryUnion(pols, id = pols@data$predictors_pt598000_4413000samp10_Pb )
pols1
pols2
plot(pols2[1,])
plot(pols2[1])
sp::plot(pols2[1])
sp::plot(pols2[1,])
?rgeos::gUnaryUnion
?raster::rasterToPolygons
pols <- raster::rasterToPolygons(r, dissolve = T, fun = function(x){x==1}, digits =2)
pols
pols2
?rgeos::gUnaryUnion
pols2 <- rgeos::gUnionCascaded(pols)
pols2
pols2
sp::plot(pols21)
sp::plot(pols2)
sp::plot(pols2[1,])
sp::plot(pols2[1])
pols2 <- maptools::unionSpatialPolygons(pols, ID = rep(1, length(pols)))
pols <- raster::rasterToPolygons(r, dissolve = F, fun = function(x){x==1}, digits =2)
pols2 <- maptools::unionSpatialPolygons(pols, ID = rep(1, length(pols)))
require(maptools)
pols2 <- maptools::unionSpatialPolygons(pols, ID = rep(1, length(pols)))
pols2
pols2
sp::plot(pols2)
?maptools::unionSpatialPolygons
length(pols)
pols
pols2
length(pols)
pols2 <- maptools::unionSpatialPolygons(pols, IDs = rep(1, length(pols)))
pols2
sp::plot(pols2[1,])
?extract
